Ext.data.JsonP.scheduler_crud_manager({"guide":"<h1 id='scheduler_crud_manager-section-using-crud-manager-with-ext-scheduler'>Using CRUD manager with Ext Scheduler</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/scheduler_crud_manager-section-intro'>Intro</a></li>\n<li><a href='#!/guide/scheduler_crud_manager-section-benefits-of-using-the-crud-manager'>Benefits of using the CRUD manager</a></li>\n<li><a href='#!/guide/scheduler_crud_manager-section-stores'>Stores</a></li>\n<li><a href='#!/guide/scheduler_crud_manager-section-implementation'>Implementation</a></li>\n<li><a href='#!/guide/scheduler_crud_manager-section-error-handling'>Error handling</a></li>\n<li><a href='#!/guide/scheduler_crud_manager-section-writing-own-server-side-implementation.'>Writing own server-side implementation.</a></li>\n</ol>\n</div>\n\n<h2 id='scheduler_crud_manager-section-intro'>Intro</h2>\n\n<p>This guide describes how to use the CRUD manager with Ext Scheduler.\nIt contains only Scheduler specific details. For general information on CRUD manager implementation and architecture\nsee <a href=\"#!/guide/crud_manager\">this guide</a>.</p>\n\n<p>The class implementing the <em>CRUD manager</em> (or \"CM\") for Ext Scheduler is called <a href=\"#!/api/Sch.data.CrudManager\" rel=\"Sch.data.CrudManager\" class=\"docClass\">Sch.data.CrudManager</a>.\nIt uses <a href=\"#!/api/Sch.crud.transport.Ajax\" rel=\"Sch.crud.transport.Ajax\" class=\"docClass\">AJAX</a> as transport system and <a href=\"#!/api/Sch.crud.encoder.Json\" rel=\"Sch.crud.encoder.Json\" class=\"docClass\">JSON</a> as the encoding format.</p>\n\n<h2 id='scheduler_crud_manager-section-benefits-of-using-the-crud-manager'>Benefits of using the CRUD manager</h2>\n\n<p>In previous versions of our code base, you had to load and save data using the standard Ext JS data package. This would involve\nsetting proxies on data stores and handling load and save on each such store. This approach worked, but had a few drawbacks:</p>\n\n<ul>\n<li>To load data into the Scheduler, two ajax requests were typically required (one for the EventStore, and one for the ResourceStore)</li>\n<li>Hard to use database transactions on the server side.</li>\n</ul>\n\n\n<p>For performance reasons, obvisously we'd like the loading process to use a single request that returns the resources and all their events.\nThis is now easy to achieve since the CM loads the data in one request. When it comes to saving changes, you normally want to have an\n \"all-or-nothing\" transaction-based approach to persisting updates in your database. This is not feasible if you're using two separate ajax requests.</p>\n\n<h2 id='scheduler_crud_manager-section-stores'>Stores</h2>\n\n<p>There are two stores used in Scheduler: resources and events store. To register them in with the <a href=\"#!/api/Sch.data.CrudManager\" rel=\"Sch.data.CrudManager\" class=\"docClass\">Sch.data.CrudManager</a> instance, simply pass the <a href=\"#!/api/Sch.data.CrudManager-cfg-resourceStore\" rel=\"Sch.data.CrudManager-cfg-resourceStore\" class=\"docClass\">resourceStore</a> and\n<a href=\"#!/api/Sch.data.CrudManager-cfg-eventStore\" rel=\"Sch.data.CrudManager-cfg-eventStore\" class=\"docClass\">eventStore</a> respectively.</p>\n\n<pre><code>var crudManager = new <a href=\"#!/api/Sch.data.CrudManager\" rel=\"Sch.data.CrudManager\" class=\"docClass\">Sch.data.CrudManager</a>({\n    autoLoad        : true,\n    resourceStore   : resourceStore,\n    eventStore      : eventStore,\n    transport       : {\n        load    : {\n            url     : 'php/read.php'\n        },\n        sync    : {\n            url     : 'php/save.php'\n        }\n    }\n});\n</code></pre>\n\n<p>You can let the CM handle loading/saving for any other custom stores of yours. To do this, simply provide your additional stores using the <a href=\"#!/api/Sch.data.CrudManager-cfg-stores\" rel=\"Sch.data.CrudManager-cfg-stores\" class=\"docClass\">stores</a> config:</p>\n\n<pre><code>var crudManager = new <a href=\"#!/api/Sch.data.CrudManager\" rel=\"Sch.data.CrudManager\" class=\"docClass\">Sch.data.CrudManager</a>({\n    autoLoad        : true,\n    resourceStore   : resourceStore,\n    eventStore      : eventStore,\n    stores          : [ store1, store2, store3 ],\n    transport       : {\n        load    : {\n            url     : 'php/read.php'\n        },\n        sync    : {\n            url     : 'php/save.php'\n        }\n    }\n});\n</code></pre>\n\n<p>Or add them programmatically using the <a href=\"#!/api/Sch.data.CrudManager-method-addStore\" rel=\"Sch.data.CrudManager-method-addStore\" class=\"docClass\">addStore</a> method:</p>\n\n<pre><code>crudManager.addStore([ store2, store3 ]);\n</code></pre>\n\n<h2 id='scheduler_crud_manager-section-implementation'>Implementation</h2>\n\n<p>In order to start using the CM with your Scheduler implmenetation, all you need to do is to create the CRUD manager and configure it with an \"eventStore\", a \"resourceStore\", and \"load\" and \"save\" URLs:</p>\n\n<pre><code>var crudManager = Ext.create('<a href=\"#!/api/Sch.data.CrudManager\" rel=\"Sch.data.CrudManager\" class=\"docClass\">Sch.data.CrudManager</a>', {\n    autoLoad        : true,\n    resourceStore   : resourceStore,\n    eventStore      : eventStore,\n    transport       : {\n        load    : {\n            url     : 'php/read.php'\n        },\n        sync    : {\n            url     : 'php/save.php'\n        }\n    }\n});\n</code></pre>\n\n<p>In the above example, the loading will start automatically since the CM is configured with the <a href=\"#!/api/Sch.data.CrudManager-cfg-autoLoad\" rel=\"Sch.data.CrudManager-cfg-autoLoad\" class=\"docClass\">autoLoad</a> config set to <code>true</code>.\nThere is also a <a href=\"#!/api/Sch.data.CrudManager-method-load\" rel=\"Sch.data.CrudManager-method-load\" class=\"docClass\">load</a> method to invoke the loading manually:</p>\n\n<pre><code>crudManager.load(function (response) {\n    alert('Data loaded...');\n})\n</code></pre>\n\n<p>To persist changes, there is an <a href=\"#!/api/Sch.data.CrudManager-cfg-autoSync\" rel=\"Sch.data.CrudManager-cfg-autoSync\" class=\"docClass\">autoSync</a> config for automatic save after a data change\nand of course you can also call <a href=\"#!/api/Sch.data.CrudManager-method-sync\" rel=\"Sch.data.CrudManager-method-sync\" class=\"docClass\">sync</a> method manually:</p>\n\n<pre><code>crudManager.sync(function (response) {\n    alert('Changes saved...');\n});\n</code></pre>\n\n<p>Any <a href=\"#!/api/Sch.panel.SchedulerGrid\" rel=\"Sch.panel.SchedulerGrid\" class=\"docClass\">Sch.panel.SchedulerGrid</a> or <a href=\"#!/api/Sch.panel.SchedulerTree\" rel=\"Sch.panel.SchedulerTree\" class=\"docClass\">Sch.panel.SchedulerTree</a> instances can be configured to use the <em>CRUD manager</em> by providing the\n<a href=\"#!/api/Sch.panel.SchedulerGrid-cfg-crudManager\" rel=\"Sch.panel.SchedulerGrid-cfg-crudManager\" class=\"docClass\">crudManager</a> config. In this case you don't need to specify <a href=\"#!/api/Sch.panel.SchedulerGrid-cfg-resourceStore\" rel=\"Sch.panel.SchedulerGrid-cfg-resourceStore\" class=\"docClass\">resourceStore</a> and <a href=\"#!/api/Sch.panel.SchedulerGrid-cfg-eventStore\" rel=\"Sch.panel.SchedulerGrid-cfg-eventStore\" class=\"docClass\">eventStore</a>\non the panel. They will be taken from the provided <a href=\"#!/api/Sch.panel.SchedulerGrid-cfg-crudManager\" rel=\"Sch.panel.SchedulerGrid-cfg-crudManager\" class=\"docClass\">crudManager</a>. Your stores should not be using the\nautoLoad or autoSync settings, since this is now handled by the CM they belong to.</p>\n\n<pre><code>var scheduler = new <a href=\"#!/api/Sch.panel.SchedulerGrid\" rel=\"Sch.panel.SchedulerGrid\" class=\"docClass\">Sch.panel.SchedulerGrid</a>({\n    viewPreset          : 'dayAndWeek',\n    startDate           : new Date(2014, 0, 1),\n    endDate             : new Date(2014, 1, 1),\n    width               : 800,\n    height              : 350,\n    // Tell the scheduler to use our CRUD manager\n    crudManager         : crudManager\n});\n</code></pre>\n\n<h2 id='scheduler_crud_manager-section-error-handling'>Error handling</h2>\n\n<p>See <a href=\"#!/guide/crud_manager-section-5\">details on error handling in general guide</a>.</p>\n\n<h2 id='scheduler_crud_manager-section-writing-own-server-side-implementation.'>Writing own server-side implementation.</h2>\n\n<p>The CM doesn't require any specific backend, meaning you can implement the server-side parts in any platform. The only requirement is to follow <a href=\"#!/guide/crud_manager-section-3\">the requests and responses structure convention</a>.</p>\n","title":"Using CRUD manager with Ext Scheduler"});